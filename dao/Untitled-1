https://www.getpostman.com/collections/e7df6dc45abb5d9b2a7a
package controller

import (
	"net/http"

	"CASHBAGME/database"
	"CASHBAGME/model"
	"context"
	"fmt"
	"log"
	"github.com/labstack/echo"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

//CompanyCreate func to ....
func CompanyCreate(c echo.Context) error {

	collection := database.DB.Collection("companies")
	company := new(model.CompanyBSON)
	c.Bind(company)
	company.ID = primitive.NewObjectID()
	_, err := collection.InsertOne(context.TODO(), company)
	if err != nil {
		fmt.Println(err)
	}
	return c.JSON(http.StatusCreated, company)
}

//CompanyList func to ...
func CompanyList(c echo.Context) error {
	collection := database.DB.Collection("companies")
	cursor, err := collection.Find(context.TODO(), bson.M{})
	if err != nil {
		fmt.Println(err)
	}
	var companies []model.CompanyBSON
	for cursor.Next(context.TODO()) {
		var company model.CompanyBSON
		err := cursor.Decode(&company)
		if err != nil {
			fmt.Println(err)
		}
		companies = append(companies, company)

	}
	return c.JSON(http.StatusOK, companies)

}

//CompanyUpdate func to ...
func CompanyUpdate(c echo.Context) error {
	collection := database.DB.Collection("companies")
	companies := new(model.CompanyBSON)
	if err := c.Bind(companies); err != nil {
		log.Println(err)
	}
	id := c.Param("id")
	objectID, _ := primitive.ObjectIDFromHex(id)
	filter := bson.M{"_id": objectID}
	update := bson.M{"$set": bson.M{
		"name":           companies.Name,
		"address":        companies.Address,
		"balance":        companies.Balance,
		"loyaltyProgram": companies.LoyaltyProgram,
		"active":         companies.Active,
		"createAt":       companies.CreateAt,
		"updateAt":       companies.UpdateAt,
	}}
	result, err := collection.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Fatal(err)
	}
	return c.JSON(http.StatusOK, result)

}

//CompanyActive func to ...
func CompanyActive(c echo.Context) error {
	collection := database.DB.Collection("companies")
	companies := new(model.CompanyBSON)
	if err := c.Bind(companies); err != nil {
		log.Println(err)
	}
	id := c.Param("id")
	objectID, _ := primitive.ObjectIDFromHex(id)
	filter := bson.M{"_id": objectID}
	update := bson.M{"$set": bson.M{
		"active": true,
	}}
	result, err := collection.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Fatal(err)
	}
	return c.JSON(http.StatusOK, result)

}
